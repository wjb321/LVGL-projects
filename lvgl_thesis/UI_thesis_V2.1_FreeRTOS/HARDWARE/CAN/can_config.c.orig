#include "can_config.h"
#include "usart.h"
#include "ttcan.h"
#include "TTCAN_mes.h"
/*Mater Node*/
uint8_t MasterNumBC =0;
uint64_t MasterTimeTx =0;
uint8_t MASTER_DATA0,MASTER_DATA1,MASTER_DATA2,MASTER_DATA3,MASTER_DATA4,MASTER_DATA5,MASTER_DATA6,MASTER_DATA7;
/*Slave Node*/
uint8_t CAN_DATA0,CAN_DATA1,CAN_DATA2,CAN_DATA3,CAN_DATA4,CAN_DATA5,CAN_DATA6,CAN_DATA7;
void CanInit(void);
void CanFilter_0_Configure(void);
void CanFilter_Speed_Configure(void);
void CanFilter_ECU_Configure(void);
/*******************************************************************************
* Function Name  : CAN_mode_Configuration
* Description    : contains CAN mode and filter congiguration
* Input          : None
* Output         : None
* Return         : None
* Attention		   : 1) for testing, better use loopback mode, after testing then use normal mode
*******************************************************************************/
void CAN_SPEED_Configuration(void)
{
  CanInit();
  CanFilter_0_Configure();
	CanFilter_Speed_Configure();
  NVIC0_Configuration();
  NVIC1_Configuration();
  GPIO_Configuration(); // configure the can IO
}

void CAN_ECU_Configuration(void)
{
  CanInit();
  CanFilter_0_Configure();
	//CanFilter_Speed_Configure() ;
  CanFilter_ECU_Configure();
  NVIC0_Configuration();
  NVIC1_Configuration();
  GPIO_Configuration(); // configure the can IO
}

void CAN_ABSCONTROL_Configuration(void)
{
  CanInit();
  CanFilter_0_Configure();
  CanFilter_ABS_Configure();
  NVIC0_Configuration();
  NVIC1_Configuration();
  GPIO_Configuration(); // configure the can IO
}

void CAN_Master_Configuration(void)
{
  CAN_InitTypeDef        CAN_InitStructure;  // CAN mode struct
  CAN_FilterInitTypeDef  CAN_FilterInitStructure;  // CAN filter struct
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); // enable can1 clock.
  NVIC0_Configuration(); 
  GPIO_Configuration(); // configure the can IO
  CAN_DeInit(CAN1);
  CAN_StructInit(&CAN_InitStructure);

  /* CAN cell init */
  CAN_InitStructure.CAN_TTCM = DISABLE; /* 时间触发禁止, 时间触发：CAN硬件的内部定时器被激活，并且被用于产生时间戳 */
  CAN_InitStructure.CAN_ABOM = ENABLE; /* 自动离线禁止，自动离线：一旦硬件监控到128次11个隐性位，就自动退出离线状态。在这里要软件设定后才能退出 */
  CAN_InitStructure.CAN_AWUM = ENABLE;  /* 自动唤醒禁止，有报文来的时候自动退出休眠	*/
  CAN_InitStructure.CAN_NART = ENABLE; /* 报文重传, 如果错误一直传到成功止，否则只传一次 */
  CAN_InitStructure.CAN_RFLM = DISABLE; /* receive FIFO lock, 1-- after locking, newly coming data will be ignored.0--接收到新的报文则覆盖前一报文	*/
  CAN_InitStructure.CAN_TXFP = DISABLE;  /* FIFO priority, 0 means decide by identifier, 1 means decided by request sequence	*/
  CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; /*  CAN_Mode_Silent ; CAN_Mode_LoopBack,模式	*/
  CAN_InitStructure.CAN_SJW = CAN_SJW_4tq;      /* 重新同步跳宽，只有can硬件处于初始化模式时才能访问这个寄存器 */
  CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;      /* PTS + PBS1 */
  CAN_InitStructure.CAN_BS2 = CAN_BS2_1tq;      /* PBS2 */
  CAN_InitStructure.CAN_Prescaler = 45;         /* 波特率预分频数 */
  /* 波特率计算方法 */
  /* CANbps= Fpclk/((BRP+1)*((Tseg1+1)+(Tseg2+1)+1)  此处计算为  CANbps=36000000/(45*(4+3+1))=100kHz */   														  //此处Tseg1+1 = CAN_BS1_8tp
  /* 配置大方向: Tseg1>=Tseg2  Tseg2>=tq; Tseg2>=2TSJW */
  // wang configure
  CAN_Init(CAN1,&CAN_InitStructure);
	//13.04,22： 过滤器的优先级别参考中文参考手册的433页
  CAN_FilterInitStructure.CAN_FilterActivation=ENABLE;
  CAN_FilterInitStructure.CAN_FilterFIFOAssignment=0;  /* 能够通过该过滤器的报文存到fifo0中 */
  CAN_FilterInitStructure.CAN_FilterNumber=0;     /* 过滤器0 */
  CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
  CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
  CAN_FilterInitStructure.CAN_FilterIdHigh= 0x0000;
  CAN_FilterInitStructure.CAN_FilterIdLow= 0x0000;
  CAN_FilterInitStructure.CAN_FilterMaskIdHigh  = 0x0000;
  CAN_FilterInitStructure.CAN_FilterMaskIdLow   = 0x0000;
  CAN_ITConfig(CAN1,CAN_IT_FMP0, ENABLE);   
  CAN_FilterInit(&CAN_FilterInitStructure);
}

void CanInit()
{
  CAN_InitTypeDef        CAN_InitStructure;  // CAN mode struct
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); // enable can1 clock.
  /* CAN register init */
  CAN_DeInit(CAN1);// reset all registers of the peripheral CAN to their default values
  CAN_StructInit(&CAN_InitStructure);

  /* CAN cell init */
  CAN_InitStructure.CAN_TTCM = DISABLE; /* 时间触发禁止, 时间触发：CAN硬件的内部定时器被激活，并且被用于产生时间戳 */
  CAN_InitStructure.CAN_ABOM = ENABLE; /* 自动离线禁止，自动离线：一旦硬件监控到128次11个隐性位，就自动退出离线状态。在这里要软件设定后才能退出 */
  CAN_InitStructure.CAN_AWUM = ENABLE;  /* 自动唤醒禁止，有报文来的时候自动退出休眠	*/
  CAN_InitStructure.CAN_NART = ENABLE; /* The message is retransmitted, and if it is transmitted in error, it is transmitted until it succeeds. */
  CAN_InitStructure.CAN_RFLM = DISABLE; /* receive FIFO lock, 1-- after locking, newly coming data will be ignored.0--接收到新的报文则覆盖前一报文	*/
  CAN_InitStructure.CAN_TXFP = DISABLE;  /* FIFO priority, 0 means decide by identifier, 1 means decided by request sequence	*/
  //CAN_InitStructure.CAN_Mode = CAN_Mode_LoopBack; /*better for testing. when 2 boards communication, then it is mode_normal 	*/
  CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; /* 模式	*/
  //CAN_InitStructure.CAN_Mode = CAN_Mode_Silent ;
  CAN_InitStructure.CAN_SJW = CAN_SJW_4tq;      /* 重新同步跳宽，只有can硬件处于初始化模式时才能访问这个寄存器 */
  CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;      /* PTS + PBS1 */
  CAN_InitStructure.CAN_BS2 = CAN_BS2_1tq;      /* PBS2 */
  CAN_InitStructure.CAN_Prescaler = 45;         /* 波特率预分频数 */
  CAN_Init(CAN1,&CAN_InitStructure);
//  if (CAN_Init(CAN1,&CAN_InitStructure) == CANINITFAILED)
//    {
//    }
}

void CanFilter_0_Configure()
{ 
//	CAN_FilterInitStructure.CAN_FilterIdHigh   =(((u32)slave_id<<3)&0xFFFF0000)>>16;
//  CAN_FilterInitStructure.CAN_FilterIdLo=(((u32)slave_id<<3)|CAN_ID_EXT|CAN_RTR_DATA)&0xFFFF;

  CAN_FilterInitTypeDef  CAN_FilterInitStructure0;  // CAN filter struct
  CAN_FilterInitStructure0.CAN_FilterActivation=ENABLE;
  CAN_FilterInitStructure0.CAN_FilterFIFOAssignment=0;  /* 能够通过该过滤器的报文存到fifo0中 */
  CAN_FilterInitStructure0.CAN_FilterNumber=0;     /* 过滤器0 */
  CAN_FilterInitStructure0.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
  CAN_FilterInitStructure0.CAN_FilterScale=CAN_FilterScale_32bit; 
  //CAN_FilterInitStructure0.CAN_FilterIdHigh= ((((u32)MaskID_SM<<3)| CAN_ID_EXT  |CAN_RTR_DATA)&0xFFFF0000)>>16;
	CAN_FilterInitStructure0.CAN_FilterIdHigh= ((((u32)MaskID_SM<<21))&0xFFFF0000)>>16; //MaskID_SM
  CAN_FilterInitStructure0.CAN_FilterIdLow= (((u32)MaskID_SM<<21)| CAN_ID_STD  |CAN_RTR_DATA)&0xFFFF;  //CAN_ID_EXT 
  CAN_ITConfig(CAN1,CAN_IT_FMP0, ENABLE);   /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
  CAN_FilterInitStructure0.CAN_FilterMaskIdHigh  = 0xFF9F;//MaskID_SM and MaskID_Ref both can reiceive
  CAN_FilterInitStructure0.CAN_FilterMaskIdLow   = 0xFFFF;
  CAN_FilterInit(&CAN_FilterInitStructure0);
}


void CanFilter_Speed_Configure()  // node 2 in old version
{
  CAN_FilterInitTypeDef  CAN_FilterInitStructure1;  // CAN filter struct
  CAN_FilterInitStructure1.CAN_FilterActivation=ENABLE;
  CAN_FilterInitStructure1.CAN_FilterFIFOAssignment=1;  /* 能够通过该过滤器的报文存到fifo0中 */
  CAN_FilterInitStructure1.CAN_FilterNumber=1;     /* 过滤器0 */
  CAN_FilterInitStructure1.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
  CAN_FilterInitStructure1.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
  CAN_FilterInitStructure1.CAN_FilterIdHigh= ((((u32)mes4_ID<<21))&0xFFFF0000)>>16;
  CAN_FilterInitStructure1.CAN_FilterIdLow= (((u32)mes4_ID<<21)| CAN_ID_STD | CAN_RTR_DATA)&0xFFFF; //0x122
  CAN_ITConfig(CAN1,CAN_IT_FMP1, ENABLE);   /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
  CAN_FilterInitStructure1.CAN_FilterMaskIdHigh  = 0x0000;
  CAN_FilterInitStructure1.CAN_FilterMaskIdLow   = 0xFFFF;
	// if filtermaskhigh has the 0xff1f: then it can receive the ids from 0x120-0x127
	// while speed node does not need receive any IDs so the filter should change to others, now 0x125 only here can be received.
  CAN_FilterInit(&CAN_FilterInitStructure1);
}

void CanFilter_ECU_Configure()  // node1 in old version
{
  CAN_FilterInitTypeDef  CAN_FilterInitStructure1;  // CAN filter struct
  CAN_FilterInitStructure1.CAN_FilterActivation=ENABLE;
  CAN_FilterInitStructure1.CAN_FilterFIFOAssignment= 1;  /* 能够通过该过滤器的报文存到fifo0中 */
  CAN_FilterInitStructure1.CAN_FilterNumber=1;     /* 过滤器0 */
  CAN_FilterInitStructure1.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
  CAN_FilterInitStructure1.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
  CAN_FilterInitStructure1.CAN_FilterIdHigh = ((((u32)mes4_ID<<21))&0xFFFF0000)>>16;
  CAN_FilterInitStructure1.CAN_FilterIdLow  = (((u32)mes4_ID<<21)| CAN_ID_STD | CAN_RTR_DATA)&0xFFFF; //0x123
  CAN_ITConfig(CAN1,CAN_IT_FMP1, ENABLE);   /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
  CAN_FilterInitStructure1.CAN_FilterMaskIdHigh  = 0x0000; // 0x123, 0x125, 0x127 can be selected  FF3F
  CAN_FilterInitStructure1.CAN_FilterMaskIdLow   = 0xFFFF;
  CAN_FilterInit(&CAN_FilterInitStructure1);
}


void CanFilter_ABS_Configure()
{
  CAN_FilterInitTypeDef  CAN_FilterInitStructure1;  // CAN filter struct
  CAN_FilterInitStructure1.CAN_FilterActivation=ENABLE;
  CAN_FilterInitStructure1.CAN_FilterFIFOAssignment=1;  /* 能够通过该过滤器的报文存到fifo0中 */
  CAN_FilterInitStructure1.CAN_FilterNumber=1;     /* 过滤器0 */
  CAN_FilterInitStructure1.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
  CAN_FilterInitStructure1.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
  CAN_FilterInitStructure1.CAN_FilterIdHigh= ((((u32)mes3_ID<<21))&0xFFFF0000)>>16;
  CAN_FilterInitStructure1.CAN_FilterIdLow= (((u32)mes3_ID<<21)| CAN_ID_STD  |CAN_RTR_DATA)&0xFFFF; //0x123
  CAN_ITConfig(CAN1,CAN_IT_FMP1, ENABLE);   /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
  CAN_FilterInitStructure1.CAN_FilterMaskIdHigh  = 0x0000; // 0x123, 0x125, 0x127 can be selected
  CAN_FilterInitStructure1.CAN_FilterMaskIdLow   = 0xFFFF;
  CAN_FilterInit(&CAN_FilterInitStructure1);
}

//void CanFilter_2_Configure()
//{
//  CAN_FilterInitTypeDef  CAN_FilterInitStructure1;  // CAN filter struct
//  CAN_FilterInitStructure1.CAN_FilterActivation=ENABLE;
//  CAN_FilterInitStructure1.CAN_FilterFIFOAssignment=1;  /* 能够通过该过滤器的报文存到fifo0中 */
//  CAN_FilterInitStructure1.CAN_FilterNumber=1;     /* 过滤器0 */
//  CAN_FilterInitStructure1.CAN_FilterMode=CAN_FilterMode_IdMask;  /* can be IDlist,IDmask, the mask is relatively complex*/
//  CAN_FilterInitStructure1.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
//  CAN_FilterInitStructure1.CAN_FilterIdHigh= ((((u32)MaskID_Ref<<3))&0xFFFF0000)>>16;
//  CAN_FilterInitStructure1.CAN_FilterIdLow= (((u32)MaskID_Ref<<3)| CAN_ID_EXT  |CAN_RTR_DATA)&0xFFFF;
//  CAN_ITConfig(CAN1,CAN_IT_FMP1, ENABLE);   /* 挂号中断, 进入中断后读fifo的报文函数释放报文清中断标志 */
//  CAN_FilterInitStructure1.CAN_FilterMaskIdHigh  = 0xFFFF;
//  CAN_FilterInitStructure1.CAN_FilterMaskIdLow   = 0xFFE7;
//  CAN_FilterInit(&CAN_FilterInitStructure1);
//}

void NodeMesTransmit(uint16_t ID)
{

  switch(ID)
    {
    case mes1_ID:
      message1(mes1_ID);
      break;
    case mes2_ID:
      message2(mes2_ID);
      break;
    case mes3_ID:
      SendState(mes3_ID);
      break;
    case mes4_ID:
      WheelSpeed(mes4_ID);
      break;
    case mes5_ID:
      message5(mes5_ID);
      break;
    case mes6_ID:
      message6(mes6_ID);
      break;
		case mes7_ID:
      message7(mes7_ID);
      break;
				case mes7_ID:
    message7(mes7_ID);
      break;
    default :
      printf("can be a arbitrary message \r\n");
		  break;

    }
}

int i = 0;
void SendRef(uint16_t ID, uint16_t TOTNumBC, uint16_t NUMSlot, uint16_t SLOTTime)
{
  uint8_t box; 
  CanTxMsg TxMessage;
  MASTER_DATA0=TotNumBC;
  MASTER_DATA1=NumSlot;
  MASTER_DATA2=SlotTime;
  MASTER_DATA3=MasterNumBC;
  MASTER_DATA4=0x4;
  MASTER_DATA5=0x5;

  /* transmit */
  TxMessage.StdId = ID;  /* 设置标准id  注意标准id的最高7位不能全是隐性(1)。共11位 */
 // TxMessage.ExtId = ID;     //设置扩展id  扩展id共18位
  TxMessage.RTR = CAN_RTR_DATA   ; /* data frame if it is remote frame, then the struct DATA[8] */
  TxMessage.IDE = CAN_ID_STD; //CAN_ID_EXT   ;   /* 使用标准id	*/
  TxMessage.DLC = 8;            /* 数据长度, can报文规定最大的数据长度为8字节 */

  TxMessage.Data[0] = MASTER_DATA0;
  TxMessage.Data[1] = MASTER_DATA1;
  TxMessage.Data[2] = MASTER_DATA2;
  TxMessage.Data[3] = MASTER_DATA3;
  TxMessage.Data[4] = MASTER_DATA4;
  TxMessage.Data[5] = MASTER_DATA5;
  box = CAN_Transmit(CAN1,&TxMessage);  /* 返回这个信息请求发送的邮箱号0,1,2或没有邮箱申请发送no_box */

  /* transmit message wang adds */
//  MasterTimeTx = TxMessage.TimeStampTx;
//  TxMessage.TimeStampTx =0;
  while(CAN_TransmitStatus(CAN1,box) == CANTXFAILED);
  printf("master reference %d \r\n", i++);
//  printf("data[3]: %d \r\n", TxMessage.Data[3]);
//	 printf("data[7]: %d \r\n", TxMessage.Data[7]);
//   printf("\r\n the data has been sent already \r\n");

}